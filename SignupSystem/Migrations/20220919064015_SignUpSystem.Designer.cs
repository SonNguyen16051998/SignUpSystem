// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignupSystem.Models;

namespace SignupSystem.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220919064015_SignUpSystem")]
    partial class SignUpSystem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SignupSystem.Models.Class", b =>
                {
                    b.Property<int>("Id_Class")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code_Course")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Fee")
                        .HasColumnType("real");

                    b.Property<int>("Id_Khoa")
                        .HasColumnType("int");

                    b.Property<bool>("IsChieuSinh")
                        .HasColumnType("bit");

                    b.Property<int>("QtyStudent")
                        .HasColumnType("int");

                    b.HasKey("Id_Class");

                    b.HasIndex("Code_Course");

                    b.HasIndex("Id_Khoa");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SignupSystem.Models.Course", b =>
                {
                    b.Property<string>("Code_Course")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameCoure")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code_Course");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SignupSystem.Models.Fee", b =>
                {
                    b.Property<int>("Id_Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<float>("FeeRate")
                        .HasColumnType("real");

                    b.Property<int>("Id_Class")
                        .HasColumnType("int");

                    b.Property<int>("Id_Student")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfFee")
                        .HasColumnType("int");

                    b.HasKey("Id_Fee");

                    b.HasIndex("Id_Class");

                    b.HasIndex("Id_Student");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("SignupSystem.Models.HolidaySchedule", b =>
                {
                    b.Property<int>("Id_Holiday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Holiday");

                    b.ToTable("HolidaySchedules");
                });

            modelBuilder.Entity("SignupSystem.Models.Khoa", b =>
                {
                    b.Property<int>("Id_Khoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ten_Khoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_Khoa");

                    b.ToTable("Khoa");
                });

            modelBuilder.Entity("SignupSystem.Models.PointType", b =>
                {
                    b.Property<int>("Id_PointType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeSo")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_PointType");

                    b.ToTable("PointTypes");
                });

            modelBuilder.Entity("SignupSystem.Models.Quyen", b =>
                {
                    b.Property<int>("Id_Quyen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id_Quyen");

                    b.ToTable("Quyens");
                });

            modelBuilder.Entity("SignupSystem.Models.Role", b =>
                {
                    b.Property<int>("Id_Quyen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameQuyen")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_Quyen");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SignupSystem.Models.Role_Quyen", b =>
                {
                    b.Property<int>("Id_Role")
                        .HasColumnType("int");

                    b.Property<int>("Id_Quyen")
                        .HasColumnType("int");

                    b.HasKey("Id_Role", "Id_Quyen");

                    b.HasIndex("Id_Quyen");

                    b.ToTable("Role_Quyens");
                });

            modelBuilder.Entity("SignupSystem.Models.Salary", b =>
                {
                    b.Property<int>("Id_Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Teacher")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("SalaryRecevied")
                        .HasColumnType("real");

                    b.Property<int>("TeacherSalary")
                        .HasColumnType("int");

                    b.Property<float>("TotalSalary")
                        .HasColumnType("real");

                    b.Property<float>("TroCap")
                        .HasColumnType("real");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id_Salary");

                    b.HasIndex("Id_Teacher");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("SignupSystem.Models.Student", b =>
                {
                    b.Property<int>("Id_Student")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id_Student");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SignupSystem.Models.Student_Class", b =>
                {
                    b.Property<int>("Id_Class")
                        .HasColumnType("int");

                    b.Property<int>("Id_Student")
                        .HasColumnType("int");

                    b.HasKey("Id_Class", "Id_Student");

                    b.HasIndex("Id_Student");

                    b.ToTable("Student_Classes");
                });

            modelBuilder.Entity("SignupSystem.Models.Student_Point", b =>
                {
                    b.Property<int>("Id_Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code_Subject")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id_PointType")
                        .HasColumnType("int");

                    b.Property<int>("Id_Student")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.HasKey("Id_Point");

                    b.HasIndex("Code_Subject");

                    b.HasIndex("Id_PointType");

                    b.HasIndex("Id_Student");

                    b.ToTable("Student_Points");
                });

            modelBuilder.Entity("SignupSystem.Models.Subject", b =>
                {
                    b.Property<string>("Code_Subject")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id_Khoa")
                        .HasColumnType("int");

                    b.Property<int>("Id_SubjectDerpartment")
                        .HasColumnType("int");

                    b.Property<string>("NameSubject")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Code_Subject");

                    b.HasIndex("Id_Khoa");

                    b.HasIndex("Id_SubjectDerpartment");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SignupSystem.Models.SubjectDepartment", b =>
                {
                    b.Property<int>("Id_SubjectDerpartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subject_DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_SubjectDerpartment");

                    b.ToTable("SubjectDepartments");
                });

            modelBuilder.Entity("SignupSystem.Models.Subject_PointType", b =>
                {
                    b.Property<string>("Code_Subject")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id_PointType")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequied")
                        .HasColumnType("int");

                    b.HasKey("Code_Subject", "Id_PointType");

                    b.HasIndex("Id_PointType");

                    b.ToTable("Subject_Pointypes");
                });

            modelBuilder.Entity("SignupSystem.Models.Teacher", b =>
                {
                    b.Property<int>("Id_Teacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtraSubject")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MainSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id_Teacher");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SignupSystem.Models.TeacherSchedule", b =>
                {
                    b.Property<int>("Id_Schedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Classroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("Id_Class")
                        .HasColumnType("int");

                    b.Property<int>("Id_Subject")
                        .HasColumnType("int");

                    b.Property<int>("Id_Teacher")
                        .HasColumnType("int");

                    b.Property<string>("SchoolDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id_Schedule");

                    b.HasIndex("Id_Teacher");

                    b.ToTable("TeacherSchedules");
                });

            modelBuilder.Entity("SignupSystem.Models.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Id_Role")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_User");

                    b.HasIndex("Id_Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SignupSystem.Models.User_Quyen", b =>
                {
                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("Id_Quyen")
                        .HasColumnType("int");

                    b.HasKey("Id_User", "Id_Quyen");

                    b.HasIndex("Id_Quyen");

                    b.ToTable("Users_Quyen");
                });

            modelBuilder.Entity("SignupSystem.Models.Class", b =>
                {
                    b.HasOne("SignupSystem.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("Code_Course");

                    b.HasOne("SignupSystem.Models.Khoa", "khoa")
                        .WithMany("Classes")
                        .HasForeignKey("Id_Khoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("khoa");
                });

            modelBuilder.Entity("SignupSystem.Models.Fee", b =>
                {
                    b.HasOne("SignupSystem.Models.Class", "Class")
                        .WithMany("Fees")
                        .HasForeignKey("Id_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.Student", "Student")
                        .WithMany("Fees")
                        .HasForeignKey("Id_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SignupSystem.Models.Role_Quyen", b =>
                {
                    b.HasOne("SignupSystem.Models.Quyen", "Quyen")
                        .WithMany("Role_Quyens")
                        .HasForeignKey("Id_Quyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.Role", "Role")
                        .WithMany("Role_Quyens")
                        .HasForeignKey("Id_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quyen");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SignupSystem.Models.Salary", b =>
                {
                    b.HasOne("SignupSystem.Models.Teacher", "Teacher")
                        .WithMany("Salarys")
                        .HasForeignKey("Id_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SignupSystem.Models.Student_Class", b =>
                {
                    b.HasOne("SignupSystem.Models.Class", "Class")
                        .WithMany("Student_Classes")
                        .HasForeignKey("Id_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.Student", "Student")
                        .WithMany("Student_Classes")
                        .HasForeignKey("Id_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SignupSystem.Models.Student_Point", b =>
                {
                    b.HasOne("SignupSystem.Models.Subject", "Subject")
                        .WithMany("Points")
                        .HasForeignKey("Code_Subject");

                    b.HasOne("SignupSystem.Models.PointType", "PointType")
                        .WithMany("Points")
                        .HasForeignKey("Id_PointType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.Student", "Student")
                        .WithMany("Points")
                        .HasForeignKey("Id_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SignupSystem.Models.Subject", b =>
                {
                    b.HasOne("SignupSystem.Models.Khoa", "khoa")
                        .WithMany("Subjects")
                        .HasForeignKey("Id_Khoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.SubjectDepartment", "SubjectDepartment")
                        .WithMany("Subjects")
                        .HasForeignKey("Id_SubjectDerpartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("khoa");

                    b.Navigation("SubjectDepartment");
                });

            modelBuilder.Entity("SignupSystem.Models.Subject_PointType", b =>
                {
                    b.HasOne("SignupSystem.Models.Subject", "Subject")
                        .WithMany("Subject_PointTypes")
                        .HasForeignKey("Code_Subject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.PointType", "PointType")
                        .WithMany("Subject_PointTypes")
                        .HasForeignKey("Id_PointType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SignupSystem.Models.TeacherSchedule", b =>
                {
                    b.HasOne("SignupSystem.Models.Teacher", "Teacher")
                        .WithMany("teacherSchedules")
                        .HasForeignKey("Id_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SignupSystem.Models.User", b =>
                {
                    b.HasOne("SignupSystem.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Id_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SignupSystem.Models.User_Quyen", b =>
                {
                    b.HasOne("SignupSystem.Models.Quyen", "Quyen")
                        .WithMany("User_Quyens")
                        .HasForeignKey("Id_Quyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignupSystem.Models.User", "User")
                        .WithMany("User_Quyens")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quyen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SignupSystem.Models.Class", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Student_Classes");
                });

            modelBuilder.Entity("SignupSystem.Models.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("SignupSystem.Models.Khoa", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SignupSystem.Models.PointType", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Subject_PointTypes");
                });

            modelBuilder.Entity("SignupSystem.Models.Quyen", b =>
                {
                    b.Navigation("Role_Quyens");

                    b.Navigation("User_Quyens");
                });

            modelBuilder.Entity("SignupSystem.Models.Role", b =>
                {
                    b.Navigation("Role_Quyens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SignupSystem.Models.Student", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Points");

                    b.Navigation("Student_Classes");
                });

            modelBuilder.Entity("SignupSystem.Models.Subject", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Subject_PointTypes");
                });

            modelBuilder.Entity("SignupSystem.Models.SubjectDepartment", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SignupSystem.Models.Teacher", b =>
                {
                    b.Navigation("Salarys");

                    b.Navigation("teacherSchedules");
                });

            modelBuilder.Entity("SignupSystem.Models.User", b =>
                {
                    b.Navigation("User_Quyens");
                });
#pragma warning restore 612, 618
        }
    }
}
